volumes:
  config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config

services:

  ros-master:
    image: ctumrs/mrs_uav_system:latest
    network_mode: host
    env_file:
      - ./variables.env
    command: roscore

  gazebo_simulator:
    depends_on:
      - ros-master
    image: ctumrs/mrs_uav_system:latest
    network_mode: host
    volumes:
      - config:/etc/config:consistent
      - /dev/dri:/dev/dri
    env_file:
      - ./variables.env
    environment:
        DISPLAY: $DISPLAY
    command: bash -c "waitForRos && roslaunch mrs_uav_gazebo_simulation simulation.launch world_name:=grass_plane gui:=true"

  spawn:
    image: ctumrs/mrs_uav_system:latest
    depends_on:
      - ros-master
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./variables.env
    command: bash -c 'waitForGazebo; rosservice call /mrs_drone_spawner/spawn "1 --$$UAV_TYPE --enable-rangefinder"'

  hw_api:
    image: ctumrs/mrs_uav_system:latest
    depends_on:
      - ros-master
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./variables.env
    command: bash -c "waitForTime && roslaunch mrs_uav_px4_api api.launch"

  core:
    image: ctumrs/mrs_uav_system:latest
    depends_on:
      - ros-master
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./variables.env
    command: bash -c "waitForHw && roslaunch mrs_uav_core core.launch platform_config:=`rospack find mrs_multirotor_simulator`/config/mrs_uav_system/$$UAV_TYPE.yaml custom_config:=/etc/config/custom_config.yaml world_config:=/etc/config/world_config.yaml network_config:=/etc/config/network_config.yaml"

  automatic_start:
    image: ctumrs/mrs_uav_system:latest
    depends_on:
      - ros-master
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./variables.env
    command: bash -c "waitForHw && roslaunch mrs_uav_autostart automatic_start.launch custom_config:=/etc/config/automatic_start.yaml"

  takeoff:
    image: ctumrs/mrs_uav_system:latest
    depends_on:
      - ros-master
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./variables.env
    command: bash -c "waitForControl && rosservice call /uav1/hw_api/arming 1 && sleep 1 && rosservice call /uav1/hw_api/offboard"

  rviz:
    image: ctumrs/mrs_uav_system:latest
    depends_on:
      - ros-master
    network_mode: host
    volumes:
      - config:/etc/config:consistent
      - /dev/dri:/dev/dri
    env_file:
      - ./variables.env
    environment:
        DISPLAY: $DISPLAY
    command: bash -c "waitForHw && roslaunch mrs_uav_core rviz.launch"

# alternative way of running the commands
    # entrypoint: ["/bin/bash", "-c"]
    # command:
    #   - |
    #     source /opt/ros/noetic/setup.bash
    #     waitForRos
    #     rostopic list
