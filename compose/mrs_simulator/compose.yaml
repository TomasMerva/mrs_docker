volumes:

  config:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./config

  logs:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./logs

services:

  roscore:
    image: ctumrs/mrs_uav_system:${MRS_UAV_SYSTEM_VERSION}
    network_mode: host
    env_file:
      - ./stack.env
    tty: true
    command: roscore

  multirotor_simulator:
    depends_on:
      - roscore
    image: ctumrs/mrs_uav_system:${MRS_UAV_SYSTEM_VERSION}
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./stack.env
    tty: true
    command: bash -c "waitForRos && roslaunch mrs_multirotor_simulator multirotor_simulator.launch custom_config:=/etc/config/mrs_multirotor_simulator.yaml"

  hw_api:
    image: ctumrs/mrs_uav_system:${MRS_UAV_SYSTEM_VERSION}
    depends_on:
      - roscore
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./stack.env
    tty: true
    command: bash -c "waitForTime && roslaunch mrs_multirotor_simulator hw_api.launch"

  uav_core:
    image: ctumrs/mrs_uav_system:${MRS_UAV_SYSTEM_VERSION}
    depends_on:
      - roscore
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./stack.env
    tty: true
    command: bash -c "waitForHw && roslaunch mrs_uav_core core.launch platform_config:=`rospack find mrs_multirotor_simulator`/config/mrs_uav_system/$$UAV_TYPE.yaml custom_config:=/etc/config/custom_config.yaml world_config:=/etc/config/world_config.yaml network_config:=/etc/config/network_config.yaml"

  automatic_start:
    image: ctumrs/mrs_uav_system:${MRS_UAV_SYSTEM_VERSION}
    depends_on:
      - roscore
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./stack.env
    tty: true
    command: bash -c "waitForHw && roslaunch mrs_uav_autostart automatic_start.launch custom_config:=/etc/config/automatic_start.yaml"

  takeoff:
    image: ctumrs/mrs_uav_system:${MRS_UAV_SYSTEM_VERSION}
    depends_on:
      - roscore
    network_mode: host
    volumes:
      - config:/etc/config:consistent
    env_file:
      - ./stack.env
    tty: true
    command: bash -c "waitForControl && rosservice call /uav1/hw_api/arming 1 && sleep 1 && rosservice call /uav1/hw_api/offboard"

  rviz:
    image: ctumrs/mrs_uav_system:${MRS_UAV_SYSTEM_VERSION}
    depends_on:
      - roscore
    network_mode: host
    volumes:
      - config:/etc/config:consistent
        # mount the folders below to enable passing GUI to the host
      - /dev/dri:/dev/dri
    env_file:
      - ./stack.env
    environment:
        DISPLAY: $DISPLAY
    tty: true
    command: bash -c "waitForHw && roslaunch mrs_uav_core rviz.launch"

  rviz_interface:
    image: ctumrs/mrs_uav_system:${MRS_UAV_SYSTEM_VERSION}
    depends_on:
      - roscore
    network_mode: host
    volumes:
      - config:/etc/config:consistent
        # mount the folders below to enable passing GUI to the host
      - /dev/dri:/dev/dri
    env_file:
      - ./stack.env
    environment:
        DISPLAY: $DISPLAY
    tty: true
    command: bash -c "waitForHw && roslaunch mrs_rviz_plugins rviz_interface.launch"

  dogtail:
    image: klaxalk/dogtail:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - logs:/etc/logs:consistent

# alternative way of running the commands
    # entrypoint: ["/bin/bash", "-c"]
    # command:
    #   - |
    #     source /opt/ros/noetic/setup.bash
    #     waitForRos
    #     rostopic list
